#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative '../lib/geet/commandline/configuration.rb'
require_relative '../lib/geet/commandline/commands.rb'
require_relative '../lib/geet/commandline/editor.rb'
require_relative '../lib/geet/git/repository.rb'
require_relative '../lib/geet/utils/git_client.rb'
Dir[File.join(__dir__, '../lib/geet/services/*.rb')].each { |filename| require filename }

class GeetLauncher
  include Geet
  include Geet::Commandline::Commands

  def launch
    command, options = Commandline::Configuration.new.decode_argv || exit

    # `:upstream` is always false in the gist command case.
    repository = Git::Repository.new(upstream: !!options[:upstream])

    case command
    when GIST_CREATE_COMMAND
      filename = options.delete(:filename)
      options[:publik] = options.delete(:public) if options.key?(:public)

      Services::CreateGist.new.execute(repository, filename, options)
    when ISSUE_CREATE_COMMAND
      title, description = Commandline::Editor.new.edit_summary
      options[:milestone_pattern] = options.delete(:milestone) if options.key?(:milestone)

      Services::CreateIssue.new.execute(repository, title, description, options)
    when LABEL_CREATE_COMMAND
      name = options.delete(:name)

      Services::CreateLabel.new.execute(repository, name, options)
    when ISSUE_LIST_COMMAND
      Services::ListIssues.new.execute(repository, options)
    when LABEL_LIST_COMMAND
      Services::ListLabels.new.execute(repository)
    when MILESTONE_LIST_COMMAND
      Services::ListMilestones.new.execute(repository)
    when PR_CREATE_COMMAND
      title, description = edit_pr_title_and_description(repository)

      options[:milestone_pattern] = options.delete(:milestone) if options.key?(:milestone)

      Services::CreatePr.new.execute(repository, title, description, options)
    when PR_LIST_COMMAND
      Services::ListPrs.new.execute(repository)
    when PR_MERGE_COMMAND
      Services::MergePr.new.execute(repository, options)
    else
      raise "Internal error - Unrecognized command #{command.inspect}"
    end
  end

  private

  def edit_pr_title_and_description(repository)
    # Tricky. It would be best to have Git logic exlusively inside the services,
    # but at the same time, the summary editing should be out.
    git = Utils::GitClient.new(repository)
    pr_commits = git.cherry('master')

    if pr_commits.size == 1
      prepopulated_summary = git.show_description('HEAD')
      cancel_pr_help = "In order to cancel the PR creation, delete the description above.\n"
    end

    Commandline::Editor.new.edit_summary(summary: prepopulated_summary, extra_help: cancel_pr_help)
  end
end

GeetLauncher.new.launch if $PROGRAM_NAME == __FILE__
